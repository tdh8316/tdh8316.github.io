{"version":3,"sources":["components/MenuItems.tsx","pages/About.tsx","pages/Home.tsx","App.tsx","client/Root.tsx","serviceWorker.ts","index.tsx"],"names":["MenuComponent","href","target","rel","Component","AboutPage","className","id","itemScope","itemType","style","fontFamily","HomePage","App","exact","path","component","to","Root","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAeiBA,E,iLAVX,OAAO,4BACL,4BAAI,uBAAGC,KAAK,UAAUC,OAAO,QAAQC,IAAI,uBAArC,aACJ,4BAAI,uBAAGF,KAAK,6BAA6BC,OAAO,QAAQC,IAAI,uBAAxD,WACJ,4BAAI,uBAAGF,KAAK,4BAAR,SACJ,4BAAI,uBAAGA,KAAK,aAAaC,OAAO,QAAQC,IAAI,uBAAxC,aACJ,4BAAI,uBAAGF,KAAK,KAAKC,OAAO,QAAQC,IAAI,uBAAhC,c,GAPgBC,aC2BbC,EA1BG,WAChB,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6BAASC,GAAG,SACV,yBAAKC,WAAS,EAACC,SAAS,6BACtB,yBAAKF,GAAG,eACN,kBAAC,EAAD,QAGJ,yBAAKD,UAAU,gBACb,wBAAII,MAAO,CAAEC,WAAY,aAAeL,UAAU,SAAlD,SACA,4CAAiB,0BAAMA,UAAU,iBAAhB,SAKvB,4BAAQE,WAAS,EAACC,SAAS,8BACzB,yBAAKH,UAAU,eACb,kBAAC,EAAD,UCaKM,EA/BY,WACzB,OACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAChB,6BAASC,GAAG,SACV,yBAAKC,WAAS,EAACC,SAAS,6BACtB,yBAAKF,GAAG,eACN,kBAAC,EAAD,QAGJ,yBAAKD,UAAU,gBACb,wBAAII,MAAO,CAAEC,WAAY,aAAeL,UAAU,SAAlD,QAA+D,0BAAMA,UAAU,iBAAhB,MAC/D,mCAAQ,6BAAR,iBACA,sCACS,6BADT,uBAEsB,6BAFtB,mBAGkB,6BAHlB,gCAI+B,iCAKrC,4BAAQE,WAAS,EAACC,SAAS,8BACzB,yBAAKH,UAAU,eACb,kBAAC,EAAD,UCZKO,EAXO,WACpB,OACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWJ,IACjC,kBAAC,IAAD,CAAOG,KAAK,UAAUC,UAAWX,IAEjC,kBAAC,IAAD,CAAOW,UAAW,kBAAM,kBAAC,IAAD,CAAUC,GAAG,WCC9BC,EARY,kBACvB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,SCIQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDmI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.bfcab999.chunk.js","sourcesContent":["import { Component } from \"react\";\r\nimport React from \"react\";\r\n\r\nclass MenuComponent extends Component {\r\n    render() {\r\n      return <ul>\r\n        <li><a href=\"./about\" target=\"_self\" rel=\"noopener noreferrer\">About Me</a></li>\r\n        <li><a href=\"https://github.com/tdh8316\" target=\"_self\" rel=\"noopener noreferrer\">Github</a></li>\r\n        <li><a href=\"mailto:tdh8316@naver.com\">Mail</a></li>\r\n        <li><a href=\"./projects\" target=\"_self\" rel=\"noopener noreferrer\">Projects</a></li>\r\n        <li><a href=\"./\" target=\"_self\" rel=\"noopener noreferrer\">Home</a></li>\r\n      </ul>\r\n    }\r\n  }\r\n\r\n  export default MenuComponent","import React from 'react';\r\nimport '../App.css';\r\nimport MenuComponent from '../components/MenuItems';\r\n\r\nconst AboutPage = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <section id=\"intro\">\r\n          <div itemScope itemType=\"http://schema.org/WebPage\">\r\n            <div id=\"wrap-social\">\r\n              <MenuComponent></MenuComponent>\r\n            </div>\r\n          </div>\r\n          <div className=\"wrap-content\">\r\n            <h1 style={{ fontFamily: \"Comfortaa\" }} className=\"small\">About</h1>\r\n            <h2>Donghyeok Tak<span className=\"dot-highlight\">.</span></h2>\r\n          </div>\r\n        </section>\r\n      </header>\r\n      \r\n      <footer itemScope itemType=\"http://schema.org/WPFooter\">\r\n        <div className=\"wrap-social\">\r\n          <MenuComponent></MenuComponent>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutPage;\r\n","import React from 'react';\r\nimport MenuComponent from '../components/MenuItems'\r\nimport '../App.css';\r\n\r\n\r\nconst HomePage: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <section id=\"intro\">\r\n          <div itemScope itemType=\"http://schema.org/WebPage\">\r\n            <div id=\"wrap-social\">\r\n              <MenuComponent></MenuComponent>\r\n            </div>\r\n          </div>\r\n          <div className=\"wrap-content\">\r\n            <h1 style={{ fontFamily: \"Comfortaa\" }} className=\"small\">Hello<span className=\"dot-highlight\">.</span></h1>\r\n            <h2>I am<br />Donghyeok Tak</h2>\r\n            <h4>\r\n              Student<br />\r\n              Full-Stack Developer<br />\r\n              Mobile Developer<br />\r\n              Desktop Application Developer<br />\r\n            </h4>\r\n          </div>\r\n        </section>\r\n      </header>\r\n      <footer itemScope itemType=\"http://schema.org/WPFooter\">\r\n        <div className=\"wrap-social\">\r\n          <MenuComponent></MenuComponent>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport { AboutPage, HomePage } from './pages'\r\nimport './App.css';\r\nimport { Route, Redirect, Switch } from 'react-router-dom';\r\n\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePage} />\r\n        <Route path=\"/:about\" component={AboutPage} />\r\n\r\n        <Route component={() => <Redirect to=\"/\" />} />\r\n      </Switch>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch } from 'react-router-dom';\r\nimport App from '../App';\r\n\r\n\r\nconst Root: React.FC<{}> = () => (\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <App></App>\r\n        </Switch>\r\n    </BrowserRouter>\r\n);\r\n\r\nexport default Root;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Root from './client/Root';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}